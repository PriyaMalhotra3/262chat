# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import chat_pb2 as chat__pb2, replica_pb2 as replica__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ReplicaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Firehose = channel.stream_stream(
                '/Replica/Firehose',
                request_serializer=replica__pb2.ReplicatedMessage.SerializeToString,
                response_deserializer=replica__pb2.ReplicatedMessage.FromString,
                )
        self.UserUpdate = channel.stream_stream(
                '/Replica/UserUpdate',
                request_serializer=chat__pb2.InitialRequest.SerializeToString,
                response_deserializer=chat__pb2.InitialRequest.FromString,
                )
        self.Cluster = channel.unary_unary(
                '/Replica/Cluster',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=replica__pb2.Peers.FromString,
                )


class ReplicaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Firehose(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserUpdate(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Firehose': grpc.stream_stream_rpc_method_handler(
                    servicer.Firehose,
                    request_deserializer=replica__pb2.ReplicatedMessage.FromString,
                    response_serializer=replica__pb2.ReplicatedMessage.SerializeToString,
            ),
            'UserUpdate': grpc.stream_stream_rpc_method_handler(
                    servicer.UserUpdate,
                    request_deserializer=chat__pb2.InitialRequest.FromString,
                    response_serializer=chat__pb2.InitialRequest.SerializeToString,
            ),
            'Cluster': grpc.unary_unary_rpc_method_handler(
                    servicer.Cluster,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=replica__pb2.Peers.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Replica', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Replica(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Firehose(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Replica/Firehose',
            replica__pb2.ReplicatedMessage.SerializeToString,
            replica__pb2.ReplicatedMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserUpdate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Replica/UserUpdate',
            chat__pb2.InitialRequest.SerializeToString,
            chat__pb2.InitialRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Replica/Cluster',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            replica__pb2.Peers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
